[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform float time_scale = 1.0;
uniform float side_to_side = 1.0;
uniform float pivot = 1.0;
uniform float wave = 1.0;
uniform float twist = 1.0;
uniform float mask_black = 1.0;
uniform float mask_white = 0;


vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void vertex() {
	//time_scale is a uniform float
	float time = TIME * time_scale;
	VERTEX.x += cos(time) * side_to_side;
	
	float pivot_angle = cos(time) * 0.1 * pivot;
	mat2 rotation_matrix = mat2(vec2(cos(pivot_angle), -sin(pivot_angle)), vec2(sin(pivot_angle), cos(pivot_angle)));
	VERTEX.xz = rotation_matrix * VERTEX.xz;
	float body = (VERTEX.z + 1.0) / 2.0; //for a fish centered at (0, 0) with a length of 2
	VERTEX.x += cos(time + body) * wave;
	
	float twist_angle = cos(time + body) * 0.3 * twist;
	mat2 twist_matrix = mat2(vec2(cos(twist_angle), -sin(twist_angle)), vec2(sin(twist_angle), cos(twist_angle)));
	float mask = smoothstep(mask_black, mask_white, 1.0 - body);
	
	//wave motion with mask
	VERTEX.x += cos(time + body) * mask * wave;

	//twist motion with mask
	VERTEX.xy = mix(VERTEX.xy, twist_matrix * VERTEX.xy, mask);
}"

[resource]
shader = SubResource( 1 )
shader_param/time_scale = 2.0
shader_param/side_to_side = 1.0
shader_param/pivot = 1.0
shader_param/wave = 1.0
shader_param/twist = 1.0
shader_param/mask_black = 1.0
shader_param/mask_white = 0.0
